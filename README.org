#+title: Readme
#+OPTIONS: f:t

* Org Todoist: What is it?
An *Emacs package for bidirectional incremental sync* of [[https://orgmode.org/][Org Mode]] elements with [[https://todoist.com/][Todoist]] using org /exactly how you normally would in Emacs Org Mode/.

[[https://media.githubusercontent.com/media/Lillenne/org-todoist/refs/heads/main/readme-images/demo.png]]

** Key features
- CRUD[fn:1] tasks
  - Complete by changing TODO state
  - Cancel by changing TODO state
  - Scheduling
  - Deadlines
  - Effort/Duration
  - Priority
  - Descriptions
  - Tags/Labels
  - Notes/Comments
  - Repeating tasks[fn:2]
  - Assignee[fn:3]
  - Retains LOGBOOK information (/e.g.,/ clocking)
- CRUD[fn:1] new sections
- CRUD[fn:1] new projects
- Refile tasks and sections to other sections and projects

Org Todoist also /supports collaboration with other users/ via assigning tasks and notifications.

** How it works
Commands are automatically detected and batched by diffing the current ~org-todoist-file~ with the abstract syntax tree from a snapshot of the previous sync and nodes are updated in place using a single asynchronous request, meaning /metadata (such as time tracking information and additional properties) is retained/.

Syncing is done using the [[https://developer.todoist.com/sync/v9/#overview][Todoist sync API]], which sends a single request for both pulling and pushing. *Local changes will overwrite remote changes!*

* Installation
** Doom Emacs
#+begin_src emacs-lisp
(package! org-todoist
  :recipe (:host github
           :repo "lillenne/org-todoist"
           :branch "main"
           :files ("org-todoist.el")))
#+end_src
* Usage
** Bidirectional sync
#+begin_src emacs-lisp
;; Unless ARG, go to the Todoist buffer.
(org-todoist-sync &optional ARG)
#+end_src

*Local changes will overwrite remote changes!*

** Org capture to a Todoist project section
/Captures will automatically sync by default/ via the ~org-capture-finalize-hook~.

Sample capture template:
#+begin_src emacs-lisp
(setq org-capture-templates
      `(("i" "Inbox" entry
         (file+olp ,(org-todoist-file) ,org-todoist-project-headline "Inbox" "Default")
         "* TODO %? %^G %^{EFFORT}p \nSCHEDULED: %^t"))
#+end_src
** Collaboration
*** Assigning Tasks
#+begin_src emacs-lisp
(org-todoist-assign-task) ;; Prompts for user selection and changes the responsible uid property to the user's id
(org-todoist-unassign-task) ;; Removes the responsibile uid property
#+end_src

[[https://media.githubusercontent.com/media/Lillenne/org-todoist/refs/heads/main/readme-images/assign.png]]
*** Notifying users in comments
#+begin_src emacs-lisp
;; Inserts the special tag from the todoist app that formats to @User
;; & adds the user id to uids_to_notify in the request
(org-todoist-tag-user)

;; non-nil to format in org link syntax instead of markdown for better viewing in org but worse in the Todoist app
(setq org-todoist-comment-tag-user-pretty nil)
#+end_src
** (Currently) unsupported features
[X] = Implemented

[-] = WIP or implemented with caveats

[ ] = Not currently supported

- [-] Essential task items
  - [-] Recurring tasks[fn:2]
  - [ ] Quick add
- [-] Comments
  - [-] Item comments
    - [X] Add and pull (plain-text only)
    - [ ] Sort by time added
    - [ ] Update
    - [ ] Delete
    - [-] Notify other users
  - [ ] Project comments
    - [ ] Add
    - [ ] Update
    - [ ] Delete
    - [ ] Notify other users
** Quirks
- Once a task has been permanently deleted in Todoist, changing the TODO state in org will be reset back to org-todoist-deleted-keyword on next sync. Todoist does not support reviving permanently deleted tasks.
- Comments on subtasks are added to both the root task and the subtask on Todoist, which is reflected here.
- The org element API does not properly parse property drawers if anything besides is put above them (e.g. adding your description above the property drawer), so don't do that!
* Configuration
*NOTE:* To match Todoist's 4 priority structure, this package sets the user's ~org-priority-highest~ ~org-priority-lowest~ and ~org-priority-default~ values.

** Required
Org Todoist requires a [[https://todoist.com/help/articles/find-your-api-token-Jpzx9IIlB][Todoist API token]] to function.

#+begin_src emacs-lisp
(setq org-todoist-api-token "<your-token>")
#+end_src
** Optional
- ~org-todoist-delete-remote-items~ - If non-nil, delete items no longer present in the org todoist buffer after the last sync. *This will also delete tasks refiled or archived to a separate file from Todoist*.
- ~org-todoist-file~ - The file to use for Todoist tasks.
- ~org-todoist-use-auto-reminder~ - If newly created tasks should use Todoist's default reminder. Default ~t~.
- ~org-todoist-show-n-levels~ - The fold level of the org buffer after sync, with caveats. See docstring. Default show all.
- ~org-todoist-todo-keyword~ - New tasks are given this keyword.
- ~org-todoist-done-keyword~ - Completed tasks are given this keyword.
- ~org-todoist-deleted-keyword~ - Tasks with this keyword are deleted remotely.
- ~org-todoist-storage-dir~ - Directory for storing Todoist sync_tokens and the previous org file for detecting changes to push.

** Troubleshooting
For troubleshooting errors, you can use the following variables and methods:
- ~org-todoist-log-last-request~ - Set to non-nil to log the last outgoing request to the ~org-todoist--last-request~ variable
- ~org-todoist-log-last-response~ - Set to non-nil to log the last response json to the ~org-todoist-sync-dir~ and alist to ~org-todoist--last-response~. Any
- ~org-todoist--push-test~ - Returns the detected diff commands.

* Why?
Org mode is an excellent planning and note-taking tool, but struggles in a few areas:

- Collaboration with others
- Mobile app features / availability (shoutout to [[https://github.com/orgzly-revived/orgzly-android-revived][Orgzly for their great android app]])
- Sync between devices (I personally use [[https://syncthing.net/][Syncthing]] which works well, but will often have conflicts when adding from the widget)

Todoist fills these gaps and, more importantly, my wife uses it.

There is currently [[https://github.com/abrochard/emacs-todoist][another great integration]] for org-mode and todoist, but it takes a fundamentally different approach (stateless on-demand regeneration using many requests with the [[https://developer.todoist.com/rest/v2/#overview][REST API]] vs stateful syncing with a single request to the [[https://developer.todoist.com/sync/v9/#overview][sync API]] that can be queried by [[https://github.com/orgzly-revived/orgzly-android-revived][Orgzly]] on mobile and buffer creation with org.el vs [[https://orgmode.org/worg/dev/org-element-api.html][org-element-api]]).

* Contributing, Issues, and Feature Request
Feel free to submit an [[https://github.com/Lillenne/org-todoist/issues/new][issue or feature request]]! When submitting issues *please see the [[Troubleshooting][troubleshooting]] section and attach the response json (or at least the error information)*. I'll do my best to address issues timely and evaluate feature additions. I work full time and have two very young (0-3) boys, so if there is a feature you want to add please feel free to submit a PR yourself!

** Todoist API Data

My personal test API call data is included in the repo to show the API return format and help my own development but is protected with [[https://github.com/getsops/sops][sops]]. If you need data for any reason, please use your own.

To test interacting with the Todoist API using curl with your own data, you can use the following commands. Note, Todoist has many great examples using curl in their [[https://developer.todoist.com/sync/v9/#overview][API documentation]].

#+begin_src shell
curl https://api.todoist.com/sync/v9/sync \
    -H "Authorization: Bearer <token> " \
    -d sync_token='sSK9OCkrXyWsUjMU0g6iuS05TwAKhmceWSiL7FCho_p2SRb23dpApCsv9u_P2jyidIDJqjE94dzOeB-1JnipI5wJRl01N8ZdaeTBdMUbxvWZavpF' \
    -d resource_types='["all"]'
#+end_src

#+begin_src shell
curl https://api.todoist.com/sync/v9/sync \
    -H "Authorization: Bearer <token>" \
    -d commands='[
    {
        "type": "item_complete",
        "uuid": "a74bfb5c-5f1d-4d14-baea-b7415446a871",
        "args": {
            "id": "<task-id>"
        }
    }]'
#+end_src

** Not on Roadmap

Things that I am not currently planning to implement (myself! you are welcome to!) due to time restrictions or it not being important to my workflow:
- File attachments
- Filters (use org agenda for this)
- Location notifications
- Updating or deleting comments
- Markdown support

* Disclaimer
This package is not associated with, created by, or endorsed by [[https://doist.com/][Doist]] or [[https://orgmode.org/][Org]]

* Author's notes
This is my first major elisp project, so I am almost certainly missing some best practices and useful tools. If you have any knowledge to share or want to contribute, please reach out, create an issue, or open a PR!

* Footnotes
[fn:1] CRUD: create, read, update, delete

[fn:2] Recurring tasks only support a subset of Todoist scheduling features. e.g. Todoists "every mon, fri" is not easily recreatable using org mode. These tasks should still be pulled down correctly from Todoist on next sync.

[fn:3] Assignee is a Todoist-only idea, but is supported via the [[Collaboration]] commands
